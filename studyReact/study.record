记录近期的学习。


2016年12月21日23:51:54

最近在看react，webpack，node，个人博客制作大概在一个月后也开始提上日程。
自己水平还是很有限，前几天一直在看webpack，而只是单纯的看，有点想动手却无从下手的感觉，导致学习效率也十分低下，而且看着看着就困了，所以这几天挺糟糕。
之后实在单纯看也没什么大用，自己跟着别人例子敲，虽然学习效率还是说不上高，但起码比单纯的看还是高了。

说说webpack，之前一直也没接触代码构建工具，也算第一次接触，其实上上个星期也笼统的看了，但是也就像技能刚点了一点技能点一样，没啥大用。这次重新慢慢看了一遍。

目前网上的许多教程要不就很初级，要不就是混乱，很难找到适合的文章，而且自己英语也不好，对官方文档看起来也很费劲，摸索的耗时过长。

待补充（webpack的一些个人摸索的知识）

devtool 生成source map

source map就是一个信息文件，里面储存着位置信息。也就是说，转换后的代码的每一个位置，所对应的转换前的位置。用于debug。webpack把代码打包了，如果不用devtool，那console信息和显示错误信息时会直接显示打包后的文件而不是原本自己写的文件。

entry 定义接口文件，也就是想要打包那个文件，就定义在此。key信息为一字符串，改信息会放入chunk里。
output 定义生成的文件。
external 定义全局变量，需要在Html内引用先。比如react，需要在html里添加<script src="react.js"></script>先，之后在js里require('react') 或 import React from 'react' 时，webpack就不会把react顺便打包，生成一个包含react的output，打包文件。


再说react，这个其实没什么说的，之前接触过rn，还写了个2048，虽说现在再让我写似乎还是挺困难，因为基本忘了，但是对于react的思想还是保留在脑里面了，所以相当于重新接触一遍，不过这次是开始深入接触，后期主要需要考虑
react-router和redux，对路由自己同样没有什么接触，redux更是从零开始，这是后期的攻克点。


接着说node，同样保留了些懵懵懂懂的知识点，也算不是从零开始。这次接触一个点是不使用模板引擎，直接渲染html，
直接使用 res.sendFile(path.resolve(__dirname, 'xx.html')); 就行了。自己有些傻，一开始还在下面加了句 res.end() 导致没有任何作用，耽误了挺久。

说说这句，之前没深究过，就是如同抄了别人的，复制粘贴的。

app.use(express.static(__dirname + '/public'));

这是托管静态文件，也就是上文那个xx.html 里面的静态资源若是放在public（本来创这个文件夹就是为了放静态资源，基本就是在这文件夹了），例如script，那写src时直接写那个js文件相对于public的路径，例如在 public/js/a.js 直接写 src="./js/a.js"


2016年12月26日23:45:19

确实受到了英语的拖累

一直被webpack的插件卡住，而且没主动去看插件的github，没去翻他的issue，导致卡壳严重。

extract-text-webpack-plugin 看到想使用query写法，发现原来是webpack2版本才可以实现，卡住

之后想怎么热加载时提取出的css文件同样更新，发现是不可能的，其用在生产环境，而不是开发环境。

经过一系列卡壳，对webpack的认知慢慢提升，虽然提升很慢。

后面开始可以尝试初步开发博客。

2017年01月20日20:17:12

极度操蛋，现在不知原因，把代码结构整理了一番，发现图片用css的url的路径全部失效，把css-loader的sourcemap去掉后就可以了，卡这3小时

2017年01月22日11:22:25

一直在考虑到底是把前台和后台代码写在一起，还是分开，目前是分开的

 2017年01月22日13:32:51

 路由还是很有问题，现在路由为http://localhost:3001/control_back/sign_in时，
 如果main.html的src为 "./end/public/libs/react/react.js" 时获得的地址 
 是 localhost:3001/control_back/end/public/libs/react/react.js
 正确应该是 localhost:3001/end/public/libs/react/react.js

 改成 ../end/public/libs/react/react.js 才行

解决：应该是 /front


 还有，待思考，怎么匹配 /control_back  及 /control_back下的所有路径

解决：

写成正则
app.get(/^\/control_back(\/.*)?/, function (req, res){
	console.log('get controlback');
	res.sendFile(path.resolve(__dirname, '../end/public', 'main.html'))
});

或者
var router = express.Router();
router.route('/*').get(function (req, res) {
	res.sendFile(path.resolve(__dirname, '../end/public', 'main.html'));
});
app.use("/control_back", router);
